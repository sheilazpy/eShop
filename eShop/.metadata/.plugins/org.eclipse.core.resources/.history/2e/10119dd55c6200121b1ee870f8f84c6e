/*
 * Easy ComboBox population with products data from the database and data accuracy control.
 * (C) 19.01.2013 zhgzhg
 */

package combobox_products_database_management;

import java.sql.ResultSet;
import java.sql.SQLException;

import javax.swing.JOptionPane;

import database_management.MySQLdbManager;

public class ComboBox_Products_db_manager {	
	
	Integer[] productsIds = null;
	String[] productsNames = null;
	Integer[] productsQuantities = null;
	
	MySQLdbManager dbPortal = null;	
	
	public ComboBox_Products_db_manager(MySQLdbManager dbPortalPointer) {
		
		dbPortal = dbPortalPointer;
		productsIds = null;
		productsNames = null;
		productsQuantities = null;
	}
	
	public void loadAllProducts() {
		
		if (dbPortal == null) {			
			return;
		}
		
		ResultSet rs = dbPortal.executeQuery("SELECT product_id, product_name, product_quantity FROM products");
		
		if (rs == null) {
			
			productsIds = null;
			productsNames = null;
			productsQuantities = null;
			return;
		}
		
		int productsQuantity = 0;
		
		try {
			rs.last();		
			productsQuantity = rs.getRow();
			rs.first();
		}
		catch (SQLException ex) {
			
			productsIds = null;
			productsNames = null;
			productsQuantities = null;
			
			JOptionPane.showMessageDialog(null, "Грешка: " + ex.getMessage(), "Грешка", JOptionPane.ERROR_MESSAGE);
			return;
		}
		
		if (productsQuantity == 0) {
			
			productsIds = null;
			productsNames = null;
			productsQuantities = null;
			return;
		}
		
		//fill the arrays with data
		
		productsIds = new Integer[productsQuantity];
		productsNames = new String[productsQuantity];
		productsQuantities = new Integer[productsQuantity];
		
		int i = 0;
		
		while (true) {
			
			try {
				productsIds[i] = new Integer(rs.getInt(1));
				productsNames[i] = new String(rs.getString(2));
				productsQuantities[i] = new Integer(rs.getInt(3));
				
				if (rs.isLast() == true) {
					break;
				}
				
				i++;
				
				rs.next();
			}
			catch (SQLException ex) {
				
				productsIds = null;
				productsNames = null;
				productsQuantities = null;
				JOptionPane.showMessageDialog(null, "Грешка: " + ex.getMessage(), "Грешка", JOptionPane.ERROR_MESSAGE);
				return;
			}
		}
	}
	
	public String[] getAllLoadedProductsNames() {
		
		if (dbPortal == null) {
			return null;
		}
		
		return productsNames;
	}
	
	public Integer getProductIdByProductStringArrayId(int inStringArrayId) {		

		if ((dbPortal == null) || (productsIds == null) || (productsIds.length > (inStringArrayId + 1)) || (inStringArrayId < 0)) {
			return null;
		}
		
		return productsIds[inStringArrayId];
	}
	
	public Integer getProductQuantityByProductStringArrayId(int inStringArrayId) {
		
		if ((dbPortal == null) || (productsQuantities == null) || (productsQuantities.length > (inStringArrayId + 1)) 
				|| (inStringArrayId < 0)) {
			return null;
		}

		return productsQuantities[inStringArrayId];
	}
	
	public boolean decreaseProductQuantityFromProductStringArrayId(int inStringArrayId, int byHowMuch) {
		
		boolean result = true;
		
		return result;
	}
	
	public void finalize() {
		
		dbPortal = null;
		productsIds = null;
		productsNames = null;
		productsQuantities = null;		
	}

}
